
==== Executing Script ====
param ($CaptureFile)
    function Convert-TLSVersion {
        param($hex)
        switch ($hex.Trim()) {
            "0x0301" { return "TLS 1.0" }
            "0x0302" { return "TLS 1.1" }
            "0x0303" { return "TLS 1.2" }
            "0x0304" { return "TLS 1.3" }
            default { return "Unknown ($hex)" }
        }
    }
    Write-Host "`nTLS Encryption Protocol Assessment`n"
    if (!(Test-Path $CaptureFile)) {
        Write-Host "ERROR: Capture file not found: $CaptureFile"
        exit
    }
    Write-Host "1. TLS Versions Detected:"
    $tlsVersions = tshark -r $CaptureFile -Y "ssl.record.version" -T fields -e ssl.record.version | Sort-Object | Get-Unique
    if ($tlsVersions) {
        foreach ($versionString in $tlsVersions) {
            $versions = $versionString -split "," | ForEach-Object { Convert-TLSVersion $_ }
            Write-Host "   - $($versions -join ', ')"
        }
    } else {
        Write-Host "   No TLS versions found."
    }
    Write-Host "`n2. Cipher Suites Used:"
    $cipherSuites = tshark -r $CaptureFile -Y "ssl.handshake.ciphersuite" -T fields -e ssl.handshake.ciphersuite | Sort-Object | Get-Unique
    if ($cipherSuites) {
        $cipherSuites | ForEach-Object { Write-Host "   - $_" }
    } else {
        Write-Host "   No cipher suites found."
    }
    Write-Host "`n3. Checking for Weak Ciphers:"
    $weakCiphers = $cipherSuites | Where-Object { $_ -match "RC4|3DES|DES|NULL|MD5" }
    if ($weakCiphers) {
        Write-Host "   Weak ciphers found:"
        $weakCiphers | ForEach-Object { Write-Host "   - $_" }
    } else {
        Write-Host "   No weak ciphers detected."
    }
    Write-Host "`n4. Certificate Details:"
    $certs = tshark -r $CaptureFile -Y "ssl.handshake.certificate" -T fields -e x509sat.printableString
    if ($certs) {
        $certs | Sort-Object | Get-Unique | ForEach-Object { Write-Host "   - $_" }
    } else {
        Write-Host "   No certificates found."
    }

TLS Encryption Protocol Assessment

1. TLS Versions Detected:
   No TLS versions found.

2. Cipher Suites Used:
   No cipher suites found.

3. Checking for Weak Ciphers:
   No weak ciphers detected.

4. Certificate Details:
   No certificates found.

[!] ERRORS:
Test-Path : Cannot bind argument to parameter 'Path' because it is null.
At line:14 char:21
+     if (!(Test-Path $CaptureFile)) {
+                     ~~~~~~~~~~~~
    + CategoryInfo          : InvalidData: (:) [Test-Path], ParameterBindingValidationException
    + FullyQualifiedErrorId : ParameterArgumentValidationErrorNullNotAllowed,Microsoft.PowerShell.Commands.Test 
   PathCommand
 
tshark: "fields" was unexpected in this context.
    ssl.record.version -T fields -e ssl.record.version
                          ^~~~~~
tshark: "fields" was unexpected in this context.
    ssl.handshake.ciphersuite -T fields -e ssl.handshake.ciphersuite
                                 ^~~~~~
tshark: "fields" was unexpected in this context.
    ssl.handshake.certificate -T fields -e x509sat.printableString
                                 ^~~~~~
-CaptureFile : The term '-CaptureFile' is not recognized as the name of a cmdlet, function, script file, or 
operable program. Check the spelling of the name, or if a path was included, verify that the path is correct 
and try again.
At line:50 char:6
+      -CaptureFile "D:\DXSO Works\TShark\capture.pcapng"
+      ~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (-CaptureFile:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
 

==== Executing Script ====
param ($CaptureFile, $GuestSubnetPrefix)
    $ipPairs = tshark -r $CaptureFile -Y "ip" -T fields -e ip.src -e ip.dst
    if (-not $ipPairs) {
        Write-Host "No IP packets found in the capture."
        exit
    }
    $guestIPs = @(); $publicIPs = @()
    function IsPrivateIP($ip) {
        return ($ip -like "10.*" -or $ip -like "192.168.*" -or ($ip -like "172.*" -and ([int]($ip.Split('.')[1]) -ge 16 -and [int]($ip.Split('.')[1]) -le 31)))
    }
    foreach ($line in $ipPairs) {
        $parts = $line -split "`t"
        if ($parts.Count -eq 2) {
            $src = $parts[0]; $dst = $parts[1]
            if ($src.StartsWith($GuestSubnetPrefix)) { $guestIPs += $src }
            if ($dst.StartsWith($GuestSubnetPrefix)) { $guestIPs += $dst }
            foreach ($ip in @($src, $dst)) {
                if ($ip -match '^\d{1,3}(\.\d{1,3}){3}$' -and -not (IsPrivateIP $ip)) { $publicIPs += $ip }
            }
        }
    }
    $uniqueGuests = $guestIPs | Sort-Object -Unique
    $uniquePublics = $publicIPs | Sort-Object -Unique
    if ($uniqueGuests.Count -gt 0) {
        Write-Host "`nGuest devices found:"
        foreach ($ip in $uniqueGuests) { Write-Host " - $ip" }
    } else {
        Write-Host "No guest devices found."
    }
    if ($uniquePublics.Count -gt 0) {
        Write-Host "`nExternal IPs contacted:"
        foreach ($ip in $uniquePublics) { Write-Host " - $ip" }
    } else {
        Write-Host "No external IPs found."
    }
No IP packets found in the capture.

[!] ERRORS:
tshark: "fields" was unexpected in this context.
    ip -T fields -e ip.src -e ip.dst
          ^~~~~~

==== Executing Script ====
$profiles = Get-NetFirewallProfile
    foreach ($profile in $profiles) {
        $status = if ($profile.Enabled) { "ENABLED" } else { "DISABLED" }
        Write-Host "$($profile.Name) profile: $status"
    }
Domain profile: ENABLED
Private profile: ENABLED
Public profile: ENABLED

==== Executing Script ====
$counterPath = "\Network Interface(WIFI)\Bytes Total/sec"
    Write-Host "`nTimestamp`t`tTotal Bytes/sec`t(Mbps)"
    for ($i = 1; $i -le 5; $i++) {
        $counter = Get-Counter -Counter $counterPath
        $timestamp = Get-Date -Format "HH:mm:ss"
        $bps = [math]::Round($counter.CounterSamples[0].CookedValue, 2)
        $mbps = [math]::Round(($bps * 8) / 1MB, 4)
        Write-Host "$timestamp`t`t$bps`t$mbps"
        Start-Sleep -Seconds 2
    }

Timestamp		Total Bytes/sec	(Mbps)
12:15:29			0
12:15:31			0
12:15:33			0
12:15:35			0
12:15:38			0

[!] ERRORS:
Get-Counter : The \Network Interface(WIFI)\Bytes Total/sec performance counter path  is not valid.
At line:5 char:20
+         $counter = Get-Counter -Counter $counterPath
+                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidResult: (:) [Get-Counter], Exception
    + FullyQualifiedErrorId : CounterPathIsInvalid,Microsoft.PowerShell.Commands.GetCounterCommand
 
Cannot index into a null array.
At line:7 char:9
+         $bps = [math]::Round($counter.CounterSamples[0].CookedValue,  ...
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException
    + FullyQualifiedErrorId : NullArray
 
Get-Counter : The \Network Interface(WIFI)\Bytes Total/sec performance counter path  is not valid.
At line:5 char:20
+         $counter = Get-Counter -Counter $counterPath
+                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidResult: (:) [Get-Counter], Exception
    + FullyQualifiedErrorId : CounterPathIsInvalid,Microsoft.PowerShell.Commands.GetCounterCommand
 
Cannot index into a null array.
At line:7 char:9
+         $bps = [math]::Round($counter.CounterSamples[0].CookedValue,  ...
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException
    + FullyQualifiedErrorId : NullArray
 
Get-Counter : The \Network Interface(WIFI)\Bytes Total/sec performance counter path  is not valid.
At line:5 char:20
+         $counter = Get-Counter -Counter $counterPath
+                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidResult: (:) [Get-Counter], Exception
    + FullyQualifiedErrorId : CounterPathIsInvalid,Microsoft.PowerShell.Commands.GetCounterCommand
 
Cannot index into a null array.
At line:7 char:9
+         $bps = [math]::Round($counter.CounterSamples[0].CookedValue,  ...
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException
    + FullyQualifiedErrorId : NullArray
 
Get-Counter : The \Network Interface(WIFI)\Bytes Total/sec performance counter path  is not valid.
At line:5 char:20
+         $counter = Get-Counter -Counter $counterPath
+                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidResult: (:) [Get-Counter], Exception
    + FullyQualifiedErrorId : CounterPathIsInvalid,Microsoft.PowerShell.Commands.GetCounterCommand
 
Cannot index into a null array.
At line:7 char:9
+         $bps = [math]::Round($counter.CounterSamples[0].CookedValue,  ...
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException
    + FullyQualifiedErrorId : NullArray
 
Get-Counter : The \Network Interface(WIFI)\Bytes Total/sec performance counter path  is not valid.
At line:5 char:20
+         $counter = Get-Counter -Counter $counterPath
+                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidResult: (:) [Get-Counter], Exception
    + FullyQualifiedErrorId : CounterPathIsInvalid,Microsoft.PowerShell.Commands.GetCounterCommand
 
Cannot index into a null array.
At line:7 char:9
+         $bps = [math]::Round($counter.CounterSamples[0].CookedValue,  ...
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (:) [], RuntimeException
    + FullyQualifiedErrorId : NullArray
 

==== Executing Script ====
Get-CimInstance Win32_LogonSession |
    Select-Object LogonId, LogonType, AuthenticationPackage, StartTime |
    Sort-Object StartTime |
    Format-Table -AutoSize

LogonId  LogonType AuthenticationPackage StartTime          
-------  --------- --------------------- ---------          
228524           2 CloudAP               17/06/2025 18:04:53
228892           2 CloudAP               17/06/2025 18:04:53
17526718         2 CloudAP               18/06/2025 07:07:21
17527669         2 CloudAP               18/06/2025 07:07:21


